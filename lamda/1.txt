作用域与带有循环变量的默认参数相比较

在已给出的法则中有一个值得注意的特例：如果lambda或者def在函数中定义，嵌套在一个循环之中，并且嵌套的函数引用了一个上层作用域的变量，该变量被循环所改变，所有在这个循环中产生的函数都将会有相同的值——在最后一次循环中完成时被引用变量的值。具体的例子:

def makeActions():
  acts=[]
  for i in range(5):			#Tries to remember each i
    acts.append(lambda x: i ** x)	#All remember same last it
  return acts
尽管是在尝试创建一个函数列表，使得每个函数拥有不同的状态值，但是事实上，这个列表中的函数的状态值都是一样的，是4。因为嵌套作用域中的变量在嵌套的函数被调用时才进行查找，所以它们实际上记住的是同样的值(在最后一次循环迭代中循环变量的值)。

为了能让这类代码能够工作，必须使用默认参数把当前的值传递给嵌套作用域的变量。因为默认参数是在嵌套函数创建时评估的(而不是在其稍后调用时)，每一个函数记住了自己的变量i的值。

def makeActions():
  acts=[]
  for i in range(5):			#Use default instead
    acts.append(lambda x,i=i: i ** x)	#Remember current i
  return acts
{
